// Generated by BUCKLESCRIPT VERSION 1.8.0, PLEASE EDIT WITH CARE
'use strict';

var Jest   = require("bs-jest/lib/js/src/jest.js");
var Curry  = require("bs-platform/lib/js/curry.js");
var ReList = require("./reList.js");

describe("List.append", (function () {
        return Jest.test("should append two lists", (function () {
                      return Curry._2(Jest.Expect[/* toEqual */11], /* :: */[
                                  1,
                                  /* :: */[
                                    2,
                                    /* :: */[
                                      3,
                                      /* :: */[
                                        4,
                                        /* :: */[
                                          5,
                                          /* :: */[
                                            6,
                                            /* [] */0
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ], Curry._1(Jest.Expect[/* expect */0], ReList.append(/* :: */[
                                          1,
                                          /* :: */[
                                            2,
                                            /* :: */[
                                              3,
                                              /* [] */0
                                            ]
                                          ]
                                        ], /* :: */[
                                          4,
                                          /* :: */[
                                            5,
                                            /* :: */[
                                              6,
                                              /* [] */0
                                            ]
                                          ]
                                        ])));
                    }));
      }));

describe("List.all", (function () {
        Jest.test("should return true when all are true", (function () {
                return Curry._2(Jest.Expect[/* toBe */1], /* true */1, Curry._1(Jest.Expect[/* expect */0], ReList.all((function (x) {
                                      return +(x === 1);
                                    }), /* :: */[
                                    1,
                                    /* :: */[
                                      1,
                                      /* :: */[
                                        1,
                                        /* [] */0
                                      ]
                                    ]
                                  ])));
              }));
        return Jest.test("should return false when some are false", (function () {
                      return Curry._2(Jest.Expect[/* toBe */1], /* false */0, Curry._1(Jest.Expect[/* expect */0], ReList.all((function (x) {
                                            return +(x === 1);
                                          }), /* :: */[
                                          1,
                                          /* :: */[
                                            2,
                                            /* :: */[
                                              1,
                                              /* [] */0
                                            ]
                                          ]
                                        ])));
                    }));
      }));

describe("List.some", (function () {
        Jest.test("should return true when some are true", (function () {
                return Curry._2(Jest.Expect[/* toBe */1], /* true */1, Curry._1(Jest.Expect[/* expect */0], ReList.some((function (x) {
                                      return +(x === 1);
                                    }), /* :: */[
                                    1,
                                    /* :: */[
                                      2,
                                      /* :: */[
                                        1,
                                        /* [] */0
                                      ]
                                    ]
                                  ])));
              }));
        return Jest.test("should return false whesome are false", (function () {
                      return Curry._2(Jest.Expect[/* toBe */1], /* false */0, Curry._1(Jest.Expect[/* expect */0], ReList.some((function (x) {
                                            return +(x === 1);
                                          }), /* :: */[
                                          2,
                                          /* :: */[
                                            2,
                                            /* :: */[
                                              3,
                                              /* [] */0
                                            ]
                                          ]
                                        ])));
                    }));
      }));

describe("List.reverse", (function () {
        return Jest.test("should reverse a list", (function () {
                      return Curry._2(Jest.Expect[/* toEqual */11], /* :: */[
                                  3,
                                  /* :: */[
                                    2,
                                    /* :: */[
                                      1,
                                      /* [] */0
                                    ]
                                  ]
                                ], Curry._1(Jest.Expect[/* expect */0], ReList.reverse(/* :: */[
                                          1,
                                          /* :: */[
                                            2,
                                            /* :: */[
                                              3,
                                              /* [] */0
                                            ]
                                          ]
                                        ])));
                    }));
      }));

describe("List.filter", (function () {
        return Jest.test("should filter a list by its predicate", (function () {
                      return Curry._2(Jest.Expect[/* toEqual */11], /* :: */[
                                  2,
                                  /* :: */[
                                    3,
                                    /* :: */[
                                      4,
                                      /* [] */0
                                    ]
                                  ]
                                ], Curry._1(Jest.Expect[/* expect */0], ReList.filter((function (x) {
                                            return +(x > 1);
                                          }), /* :: */[
                                          1,
                                          /* :: */[
                                            2,
                                            /* :: */[
                                              3,
                                              /* :: */[
                                                4,
                                                /* [] */0
                                              ]
                                            ]
                                          ]
                                        ])));
                    }));
      }));

describe("List.reject", (function () {
        return Jest.test("should reject a list by its predicate", (function () {
                      return Curry._2(Jest.Expect[/* toEqual */11], /* :: */[
                                  2,
                                  /* :: */[
                                    3,
                                    /* [] */0
                                  ]
                                ], Curry._1(Jest.Expect[/* expect */0], ReList.reject((function (x) {
                                            return +(x === 1);
                                          }), /* :: */[
                                          1,
                                          /* :: */[
                                            2,
                                            /* :: */[
                                              3,
                                              /* [] */0
                                            ]
                                          ]
                                        ])));
                    }));
      }));

describe("List.duplicate", (function () {
        return Jest.test("should duplicate an thing by n times into a list", (function () {
                      return Curry._2(Jest.Expect[/* toEqual */11], /* :: */[
                                  "thing",
                                  /* :: */[
                                    "thing",
                                    /* :: */[
                                      "thing",
                                      /* [] */0
                                    ]
                                  ]
                                ], Curry._1(Jest.Expect[/* expect */0], ReList.duplicate(3, "thing")));
                    }));
      }));

describe("List.flatten", (function () {
        return Jest.test("should flatten a list of lists into a list of items", (function () {
                      return Curry._2(Jest.Expect[/* toEqual */11], /* :: */[
                                  1,
                                  /* :: */[
                                    2,
                                    /* :: */[
                                      3,
                                      /* :: */[
                                        4,
                                        /* [] */0
                                      ]
                                    ]
                                  ]
                                ], Curry._1(Jest.Expect[/* expect */0], ReList.flatten(/* :: */[
                                          /* :: */[
                                            1,
                                            /* :: */[
                                              2,
                                              /* [] */0
                                            ]
                                          ],
                                          /* :: */[
                                            /* :: */[
                                              3,
                                              /* :: */[
                                                4,
                                                /* [] */0
                                              ]
                                            ],
                                            /* [] */0
                                          ]
                                        ])));
                    }));
      }));

describe("List.map", (function () {
        return Jest.test("should return a new list where each item is the function return of prev list's item", (function () {
                      return Curry._2(Jest.Expect[/* toEqual */11], /* :: */[
                                  2,
                                  /* :: */[
                                    4,
                                    /* :: */[
                                      6,
                                      /* [] */0
                                    ]
                                  ]
                                ], Curry._1(Jest.Expect[/* expect */0], ReList.map((function (x) {
                                            return (x << 1);
                                          }), /* :: */[
                                          1,
                                          /* :: */[
                                            2,
                                            /* :: */[
                                              3,
                                              /* [] */0
                                            ]
                                          ]
                                        ])));
                    }));
      }));

describe("List.foldLeft", (function () {
        return Jest.test("should reduce a list to a value from the left starting from the acc", (function () {
                      return Curry._2(Jest.Expect[/* toEqual */11], "1234", Curry._1(Jest.Expect[/* expect */0], ReList.foldLeft((function (acc, x) {
                                            return acc + x;
                                          }), "1", /* :: */[
                                          "2",
                                          /* :: */[
                                            "3",
                                            /* :: */[
                                              "4",
                                              /* [] */0
                                            ]
                                          ]
                                        ])));
                    }));
      }));

describe("List.foldRight", (function () {
        return Jest.test("should reduce a list to a value from the left starting from the right", (function () {
                      return Curry._2(Jest.Expect[/* toEqual */11], "0321", Curry._1(Jest.Expect[/* expect */0], ReList.foldRight((function (acc, x) {
                                            return acc + x;
                                          }), "0", /* :: */[
                                          "1",
                                          /* :: */[
                                            "2",
                                            /* :: */[
                                              "3",
                                              /* [] */0
                                            ]
                                          ]
                                        ])));
                    }));
      }));

describe("List.wrap", (function () {
        return Jest.test("should wrap a value into a list", (function () {
                      return Curry._2(Jest.Expect[/* toEqual */11], /* :: */[
                                  1,
                                  /* [] */0
                                ], Curry._1(Jest.Expect[/* expect */0], ReList.wrap(1)));
                    }));
      }));

describe("List.length", (function () {
        return Jest.test("should return the length of a list", (function () {
                      return Curry._2(Jest.Expect[/* toEqual */11], 3, Curry._1(Jest.Expect[/* expect */0], ReList.length(/* :: */[
                                          1,
                                          /* :: */[
                                            2,
                                            /* :: */[
                                              3,
                                              /* [] */0
                                            ]
                                          ]
                                        ])));
                    }));
      }));

describe("List.sum", (function () {
        return Jest.test("should return the sum of a list of integers", (function () {
                      return Curry._2(Jest.Expect[/* toEqual */11], 6, Curry._1(Jest.Expect[/* expect */0], ReList.sum(/* :: */[
                                          1,
                                          /* :: */[
                                            2,
                                            /* :: */[
                                              3,
                                              /* [] */0
                                            ]
                                          ]
                                        ])));
                    }));
      }));

/*  Not a pure module */
