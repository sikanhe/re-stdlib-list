// Generated by BUCKLESCRIPT VERSION 1.8.0, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");

function all(pred, _param) {
  while(true) {
    var param = _param;
    if (param) {
      if (Curry._1(pred, param[0])) {
        _param = param[1];
        continue ;
        
      } else {
        return /* false */0;
      }
    } else {
      return /* true */1;
    }
  };
}

function some(pred, _param) {
  while(true) {
    var param = _param;
    if (param) {
      if (Curry._1(pred, param[0])) {
        return /* true */1;
      } else {
        _param = param[1];
        continue ;
        
      }
    } else {
      return /* false */0;
    }
  };
}

function reverse(list) {
  var _acc = /* [] */0;
  var _param = list;
  while(true) {
    var param = _param;
    var acc = _acc;
    if (param) {
      _param = param[1];
      _acc = /* :: */[
        param[0],
        acc
      ];
      continue ;
      
    } else {
      return acc;
    }
  };
}

function append(l1, l2) {
  var _l1 = reverse(l1);
  var _l2 = l2;
  while(true) {
    var l2$1 = _l2;
    var l1$1 = _l1;
    if (l1$1) {
      _l2 = /* :: */[
        l1$1[0],
        l2$1
      ];
      _l1 = l1$1[1];
      continue ;
      
    } else {
      return l2$1;
    }
  };
}

function $$delete(x, list) {
  while(true) {
    if (list) {
      if (list[0] === x) {
        return list[1];
      } else {
        continue ;
        
      }
    } else {
      return /* [] */0;
    }
  };
}

function each(f, _param) {
  while(true) {
    var param = _param;
    if (param) {
      Curry._1(f, param[0]);
      _param = param[1];
      continue ;
      
    } else {
      return /* () */0;
    }
  };
}

function find(pred, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var hd = param[0];
      if (Curry._1(pred, hd)) {
        return /* Some */[hd];
      } else {
        _param = param[1];
        continue ;
        
      }
    } else {
      return /* None */0;
    }
  };
}

function filter(pred, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var tail = param[1];
      var hd = param[0];
      if (Curry._1(pred, hd)) {
        return /* :: */[
                hd,
                filter(pred, tail)
              ];
      } else {
        _param = tail;
        continue ;
        
      }
    } else {
      return /* [] */0;
    }
  };
}

function reject(pred, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var tail = param[1];
      var hd = param[0];
      if (Curry._1(pred, hd)) {
        _param = tail;
        continue ;
        
      } else {
        return /* :: */[
                hd,
                reject(pred, tail)
              ];
      }
    } else {
      return /* [] */0;
    }
  };
}

function duplicate(n, x) {
  if (n <= 0) {
    return /* [] */0;
  } else {
    return /* :: */[
            x,
            duplicate(n - 1 | 0, x)
          ];
  }
}

function flatten(list) {
  var aux = function (_acc, _param) {
    while(true) {
      var param = _param;
      var acc = _acc;
      if (param) {
        var match = param[0];
        if (match) {
          _param = /* :: */[
            match[1],
            param[1]
          ];
          _acc = /* :: */[
            match[0],
            acc
          ];
          continue ;
          
        } else {
          _param = param[1];
          continue ;
          
        }
      } else {
        return acc;
      }
    };
  };
  return reverse(aux(/* [] */0, list));
}

function map(f, param) {
  if (param) {
    return /* :: */[
            Curry._1(f, param[0]),
            map(f, param[1])
          ];
  } else {
    return /* [] */0;
  }
}

function foldLeft(f, _acc, _param) {
  while(true) {
    var param = _param;
    var acc = _acc;
    if (param) {
      _param = param[1];
      _acc = Curry._2(f, acc, param[0]);
      continue ;
      
    } else {
      return acc;
    }
  };
}

function foldRight(f, acc, list) {
  return foldLeft(f, acc, reverse(list));
}

function wrap(item) {
  return /* :: */[
          item,
          /* [] */0
        ];
}

function length(list) {
  var _acc = 0;
  var _param = list;
  while(true) {
    var param = _param;
    var acc = _acc;
    if (param) {
      _param = param[1];
      _acc = acc + 1 | 0;
      continue ;
      
    } else {
      return acc;
    }
  };
}

function sum(list) {
  var _acc = 0;
  var _param = list;
  while(true) {
    var param = _param;
    var acc = _acc;
    if (param) {
      _param = param[1];
      _acc = param[0] + acc | 0;
      continue ;
      
    } else {
      return acc;
    }
  };
}

exports.all       = all;
exports.some      = some;
exports.reverse   = reverse;
exports.append    = append;
exports.$$delete  = $$delete;
exports.each      = each;
exports.find      = find;
exports.filter    = filter;
exports.reject    = reject;
exports.duplicate = duplicate;
exports.flatten   = flatten;
exports.map       = map;
exports.foldLeft  = foldLeft;
exports.foldRight = foldRight;
exports.wrap      = wrap;
exports.length    = length;
exports.sum       = sum;
/* No side effect */
