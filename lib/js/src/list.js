// Generated by BUCKLESCRIPT VERSION 1.8.0, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");

function all(pred, _param) {
  while(true) {
    var param = _param;
    if (param) {
      if (Curry._1(pred, param[0])) {
        _param = param[1];
        continue ;
        
      } else {
        return /* false */0;
      }
    } else {
      return /* true */1;
    }
  };
}

function some(pred, _param) {
  while(true) {
    var param = _param;
    if (param) {
      if (Curry._1(pred, param[0])) {
        return /* true */1;
      } else {
        _param = param[1];
        continue ;
        
      }
    } else {
      return /* false */0;
    }
  };
}

function reverse(list) {
  var _acc = /* [] */0;
  var _param = list;
  while(true) {
    var param = _param;
    var acc = _acc;
    if (param) {
      _param = param[1];
      _acc = /* :: */[
        param[0],
        acc
      ];
      continue ;
      
    } else {
      return acc;
    }
  };
}

function append(l1, l2) {
  var _l1 = reverse(l1);
  var _l2 = l2;
  while(true) {
    var l2$1 = _l2;
    var l1$1 = _l1;
    if (l1$1) {
      _l2 = /* :: */[
        l1$1[0],
        l2$1
      ];
      _l1 = l1$1[1];
      continue ;
      
    } else {
      return l2$1;
    }
  };
}

function filter(pred, list) {
  var _acc = /* [] */0;
  var _param = list;
  while(true) {
    var param = _param;
    var acc = _acc;
    if (param) {
      var tail = param[1];
      var hd = param[0];
      if (Curry._1(pred, hd)) {
        _param = tail;
        _acc = /* :: */[
          hd,
          acc
        ];
        continue ;
        
      } else {
        _param = tail;
        continue ;
        
      }
    } else {
      return acc;
    }
  };
}

function reject(pred, list) {
  var _acc = /* [] */0;
  var _param = list;
  while(true) {
    var param = _param;
    var acc = _acc;
    if (param) {
      var tail = param[1];
      var hd = param[0];
      if (Curry._1(pred, hd)) {
        _param = tail;
        continue ;
        
      } else {
        _param = tail;
        _acc = /* :: */[
          hd,
          acc
        ];
        continue ;
        
      }
    } else {
      return acc;
    }
  };
}

function duplicate(n, x) {
  var _acc = /* [] */0;
  var _n = n;
  while(true) {
    var n$1 = _n;
    var acc = _acc;
    if (n$1 <= 0) {
      return acc;
    } else {
      _n = n$1 - 1 | 0;
      _acc = /* :: */[
        x,
        acc
      ];
      continue ;
      
    }
  };
}

function flatten(list) {
  var _acc = /* [] */0;
  var _param = list;
  while(true) {
    var param = _param;
    var acc = _acc;
    if (param) {
      var match = param[0];
      if (match) {
        _param = /* :: */[
          match[1],
          param[1]
        ];
        _acc = /* :: */[
          match[0],
          acc
        ];
        continue ;
        
      } else {
        _param = param[1];
        continue ;
        
      }
    } else {
      return acc;
    }
  };
}

function map(f, list) {
  var _acc = /* [] */0;
  var _param = list;
  while(true) {
    var param = _param;
    var acc = _acc;
    if (param) {
      _param = param[1];
      _acc = /* :: */[
        Curry._1(f, param[0]),
        acc
      ];
      continue ;
      
    } else {
      return acc;
    }
  };
}

function foldLeft(f, _acc, _param) {
  while(true) {
    var param = _param;
    var acc = _acc;
    if (param) {
      _param = param[1];
      _acc = Curry._2(f, acc, param[0]);
      continue ;
      
    } else {
      return acc;
    }
  };
}

function foldRight(f, acc, list) {
  return foldLeft(f, acc, reverse(list));
}

function wrap(item) {
  return /* :: */[
          item,
          /* [] */0
        ];
}

function length(list) {
  var _acc = 0;
  var _param = list;
  while(true) {
    var param = _param;
    var acc = _acc;
    if (param) {
      _param = param[1];
      _acc = acc + 1 | 0;
      continue ;
      
    } else {
      return acc;
    }
  };
}

function sum(list) {
  var _acc = 0;
  var _param = list;
  while(true) {
    var param = _param;
    var acc = _acc;
    if (param) {
      _param = param[1];
      _acc = param[0] + acc | 0;
      continue ;
      
    } else {
      return acc;
    }
  };
}

exports.all       = all;
exports.some      = some;
exports.reverse   = reverse;
exports.append    = append;
exports.filter    = filter;
exports.reject    = reject;
exports.duplicate = duplicate;
exports.flatten   = flatten;
exports.map       = map;
exports.foldLeft  = foldLeft;
exports.foldRight = foldRight;
exports.wrap      = wrap;
exports.length    = length;
exports.sum       = sum;
/* No side effect */
